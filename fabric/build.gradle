plugins {
	id 'fabric-loom' version '1.7-SNAPSHOT'
	id 'maven-publish'
	id 'me.shedaniel.unified-publishing' version '0.1.+'
}

apply from: '../common.gradle'

repositories {
	// Auto Config & Cloth Config
	maven { url 'https://maven.shedaniel.me/' }
	// Modmenu dev
	maven { url 'https://maven.terraformersmc.com/releases/' }
	maven { url = 'https://maven.nucleoid.xyz/' }
	// Fabric Shield Lib
	maven { url 'https://jitpack.io' }
	maven {url = "https://minecraft.guntram.de/maven/"}
	maven {url = "https://api.modrinth.com/maven"}
}

loom {
	accessWidenerPath = file("src/main/resources/mobz.accesswidener")
	runs {
		runConfigs.configureEach {
			// Enable Mixin debug outputs
			// vmArgs "-Dmixin.debug.export=true"

			// Enable 
			// vmArgs "-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005"
		}
	}
}

/*
tasks.named('runDatagen', JavaExec) {
	debugOptions {
		enabled = true
		port = 5005
		server = true
		suspend = true  // JVM will wait for debugger to connect before running
	}
}
*/

dependencies {
	//to change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
	
	// Auto Config & Cloth Config
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Modmenu dev
	modImplementation ("com.terraformersmc:modmenu:${project.mod_menu_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Fabric Shield Lib
	modImplementation "com.github.StellarWind22:Fabric-Shield-Lib:v${project.fabric_shield_lib_version}"
	modImplementation "maven.modrinth:midnightlib:${project.midnightlib_version}"
	modImplementation "com.github.Chocohead:Fabric-ASM:v${project.fabricasm_version}"

	// javax.annotation.Nullable
	modImplementation 'com.google.code.findbugs:jsr305:3.0.1'
}

fabricApi {
	configureDataGeneration()
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.dev_group

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand project.mergedProperties
	}
}

// configure  the source folders
sourceSets {
	main {
		java {
			srcDir "../src/main/java"
			srcDir "../src/clothconfig/java"
		}
		resources {
			srcDir "../src/main/resources"
			srcDir "src/main/generated/resources"
			exclude '.cache'
			exclude 'Thumbs.db'
		}
	}
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
	options.encoding = "UTF-8"

	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from "LICENSE"

	manifest {
		attributes('Implementation-Timestamp': new Date().toString())
	}
}

// https://github.com/FabricMC/fabric-loom/issues/452
afterEvaluate {
	tasks.remapJar {
		archiveClassifier.set("fabric")
	}
}

publishUnified.dependsOn mergeChangelog
publishUnified.inputs.files(mergeChangelog.outputs)
publishUnified.mustRunAfter(mergeChangelog)

unifiedPublishing {
	project {
		displayName = "${project.archives_base_name}-${project.mod_version}-fabric"
		version = "${project.mod_version}"
		changelog.set(project.changelogProvider)
		releaseType = "release" // Use "release", "beta" or "alpha"
		gameVersions = project.enumeratedMcVersions
		gameLoaders = ["fabric"]

		mainPublication tasks.remapJar // Declares the publicated jar

		relations {
			depends { // Mark as a required dependency
				curseforge = "fabric-api"
				modrinth = "fabric-api"
			}
			depends { // Mark as a required dependency
				curseforge = "fabric-shield-lib"
				modrinth = "fabricshieldlib"
			}
			depends { // Mark as a required dependency
				curseforge = "cloth-config"
				modrinth = "cloth-config"
			}
			optional { // Mark as an optional dependency
				curseforge = "modmenu"
				modrinth = "modmenu"
			}
		}

		if (project.curseforgeApiToken != null) {
			curseforge {
				token = project.curseforgeApiToken
				id = "336554"
			}
		}

		if (project.modrinthApiToken != null) {
			modrinth {
				token = project.modrinthApiToken
				id = "P7dR8mSH" // Required, must be a string, ID of Modrinth project
			}
		}
	}
}
