plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version '7.0.97'
	id 'me.shedaniel.unified-publishing' version '0.1.+'
}

repositories {
	maven { url "https://maven.shedaniel.me/" }
}

apply from: '../common.gradle'

project.ext.mod_id = project.archives_base_name;
project.ext.minecraft_version_range = '[' + project.minecraft_version_min + ', ' + project.minecraft_version_max + ')';

// These are defined in ../fabric/gradle.properties
version = project.mod_version
group = project.dev_group // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = project.archives_base_name

// Mojang ships Java 17 to end users in 1.18+
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

base {
	archivesName = mod_id
}

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
	configureEach {
		workingDirectory project.file('run')

		// Recommended logging data for a userdev environment
		systemProperty 'forge.logging.markers', 'SCAN,REGISTRIES'

		// Recommended logging level for the console
		systemProperty 'forge.logging.console.level', 'debug'

		modSource project.sourceSets.main
	}

	client {
		// Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', mod_id
		programArgument '--nogui'
	}

	data {
		workingDirectory project.file('run-data')

		// Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
		programArguments.addAll '--mod', mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('../src/main/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

// Sets up a dependency configuration called 'localRuntime'.
// This configuration should be used instead of 'runtimeOnly' to declare
// a dependency that will be present for runtime testing but that is
// "optional", meaning it will not be pulled by dependents of this mod.
configurations {
	runtimeClasspath.extendsFrom localRuntime
}

// Include resources generated by data generators.
sourceSets {
	main {
		java {
			srcDir "../src/main/java"
			srcDir "../src/clothconfig/java"
		}
		resources {
			srcDir "../src/main/resources"
			srcDir "src/generated/resources"
			exclude '.cache'
			exclude 'Thumbs.db'
		}
	}
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"

	// defined in ../common.properties
	implementation "me.shedaniel.cloth:cloth-config-neoforge:${project.cloth_config_version}"
}

// Example for how to get properties into the manifest for reading by the runtime..
tasks.named('jar', Jar).configure {
	version version
	manifest {
		attributes([
				"Specification-Title": mod_id,
				"Specification-Vendor": "Rikka0w0",
				"Specification-Version": "1", // We are version 1 of ourselves
				"Implementation-Title": project.name,
				"Implementation-Version": project.jar.archiveVersion,
				"Implementation-Vendor" :"Rikka0w0",
				"Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
		])
	}
}
jar.archiveClassifier = 'neoforge';

// This block of code expands all declared replace properties in the specified resource targets.
// A missing property will result in an error. Properties are expanded using ${} Groovy notation.
// When "copyIdeResources" is enabled, this will also run before the game launches in IDE environments.
// See https://docs.gradle.org/current/dsl/org.gradle.language.jvm.tasks.ProcessResources.html
tasks.withType(ProcessResources).configureEach {
	mergedProperties.setProperty('mod_id', mod_id)
	mergedProperties.setProperty('minecraft_version_range', minecraft_version_range)
	inputs.properties project.mergedProperties

	filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
		expand project.mergedProperties + [project: project]
	}
}

tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}

publishUnified.dependsOn mergeChangelog
publishUnified.inputs.files(mergeChangelog.outputs)
publishUnified.mustRunAfter(mergeChangelog)

unifiedPublishing {
	project {
		displayName = "${project.archives_base_name}-${project.mod_version}-neoforge"
		version = "${project.mod_version}"
		changelog.set(project.changelogProvider)
		releaseType = "beta" // Use "release", "beta" or "alpha"
		gameVersions = project.enumeratedMcVersions
		gameLoaders = ["neoforge"]

		mainPublication tasks.jar // Declares the publicated jar

		relations {
			depends { // Mark as a required dependency
				curseforge = "cloth-config"
				modrinth = "cloth-config"
			}
		}

		if (project.curseforgeApiToken != null) {
			curseforge {
				token = project.curseforgeApiToken
				id = "336554"
			}
		}

		if (project.modrinthApiToken != null) {
			modrinth {
				token = project.modrinthApiToken
				id = "P7dR8mSH" // Required, must be a string, ID of Modrinth project
			}
		}
	}
}
